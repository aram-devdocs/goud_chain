import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from 'react';
import { useChainInfo, useMetrics, useListCollections } from '@workspace/hooks';
import { Card, CardHeader, CardTitle, CardContent, Button } from '@workspace/ui';
export default function DebugPage() {
    const [showRaw, setShowRaw] = useState(false);
    const { data: chainInfo } = useChainInfo();
    const { data: metrics } = useMetrics();
    const { data: collections } = useListCollections();
    return (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { children: [_jsx("h2", { className: "text-3xl font-bold text-white mb-2", children: "Debug" }), _jsx("p", { className: "text-zinc-500", children: "Development tools and raw data inspection" })] }), _jsx("div", { className: "flex gap-2", children: _jsxs(Button, { variant: showRaw ? 'primary' : 'secondary', onClick: () => setShowRaw(!showRaw), children: [showRaw ? 'Hide' : 'Show', " Raw Data"] }) }), showRaw && (_jsxs(_Fragment, { children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Chain Info (Raw)" }) }), _jsx(CardContent, { children: _jsx("pre", { className: "text-xs bg-zinc-900 p-4 rounded overflow-x-auto", children: JSON.stringify(chainInfo, null, 2) }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Metrics (Raw)" }) }), _jsx(CardContent, { children: _jsx("pre", { className: "text-xs bg-zinc-900 p-4 rounded overflow-x-auto", children: JSON.stringify(metrics, null, 2) }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Collections (Raw)" }) }), _jsx(CardContent, { children: _jsx("pre", { className: "text-xs bg-zinc-900 p-4 rounded overflow-x-auto", children: JSON.stringify(collections, null, 2) }) })] })] })), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Local Storage" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-2 font-mono text-sm", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-zinc-400", children: "Session Token:" }), _jsx("span", { className: "text-white", children: localStorage.getItem('session_token') ? 'Present' : 'Missing' })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-zinc-400", children: "User ID:" }), _jsx("span", { className: "text-white", children: localStorage.getItem('user_id') || 'Not set' })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-zinc-400", children: "API Key:" }), _jsx("span", { className: "text-white", children: localStorage.getItem('api_key') ? 'Present' : 'Missing' })] })] }) })] })] }));
}
//# sourceMappingURL=debug.js.map