#!/bin/bash

set -e

COMMAND=${1:-start}
shift || true

case "$COMMAND" in
  start)
    echo "üöÄ Starting Goud Chain network (production mode)..."
    echo ""
    echo "üåê Dashboard: http://localhost:8080"
    echo "üì° Node 1: http://localhost:8081"
    echo "üì° Node 2: http://localhost:8082"
    echo "üì° Node 3: http://localhost:8083"
    echo ""
    docker compose up --build
    ;;

  dev)
    echo "üî• Starting Goud Chain network (development mode with hot reload)..."
    echo ""
    echo "üåê Dashboard: http://localhost:8080"
    echo "üì° Node 1: http://localhost:8081"
    echo "üì° Node 2: http://localhost:8082"
    echo "üì° Node 3: http://localhost:8083"
    echo ""
    echo "‚ú® Hot reload enabled:"
    echo "   - Dashboard: Changes to dashboard/ will auto-reload"
    echo "   - Nodes: Changes to src/ will auto-recompile and restart"
    echo ""
    docker compose -f docker-compose.yml -f docker-compose.dev.yml up --build
    ;;

  build)
    echo "üî® Building Docker images..."
    docker compose build
    ;;

  down|stop)
    echo "üõë Stopping Goud Chain network..."
    docker compose down
    ;;

  clean)
    echo "üßπ Cleaning up containers, images, and volumes..."
    docker compose down --rmi all --volumes --remove-orphans
    ;;

  logs)
    NODE=${1:-}
    if [ -z "$NODE" ]; then
      echo "üìã Showing logs from all nodes..."
      docker compose logs -f
    else
      echo "üìã Showing logs from $NODE..."
      docker compose logs -f "$NODE"
    fi
    ;;

  status)
    echo "üìä Network Status"
    echo "================="
    echo ""

    for node in node1 node2 node3; do
      port=$((8080 + ${node:4}))
      echo "üîó $node (http://localhost:$port)"

      if curl -s "http://localhost:$port/chain" > /dev/null 2>&1; then
        CHAIN_LENGTH=$(curl -s "http://localhost:$port/chain" | grep -o '"index"' | wc -l | xargs)
        PEERS=$(curl -s "http://localhost:$port/peers" | grep -o '"count":[0-9]*' | grep -o '[0-9]*')
        echo "   ‚úÖ Online | Chain Length: $CHAIN_LENGTH | Peers: $PEERS"
      else
        echo "   ‚ùå Offline"
      fi
      echo ""
    done
    ;;

  mine)
    NODE=${1:-node1}
    DATA=${2:-"Transaction data"}

    PORT=8081
    case "$NODE" in
      node1) PORT=8081 ;;
      node2) PORT=8082 ;;
      node3) PORT=8083 ;;
      *) echo "‚ùå Invalid node. Use: node1, node2, or node3"; exit 1 ;;
    esac

    echo "‚õèÔ∏è  Mining block on $NODE with data: \"$DATA\""
    curl -X POST "http://localhost:$PORT/mine" \
      -H "Content-Type: application/json" \
      -d "{\"data\": \"$DATA\"}" | jq .
    ;;

  chain)
    NODE=${1:-node1}

    PORT=8081
    case "$NODE" in
      node1) PORT=8081 ;;
      node2) PORT=8082 ;;
      node3) PORT=8083 ;;
      *) echo "‚ùå Invalid node. Use: node1, node2, or node3"; exit 1 ;;
    esac

    echo "üìä Blockchain from $NODE:"
    curl -s "http://localhost:$PORT/chain" | jq .
    ;;

  sync)
    NODE=${1:-node1}

    PORT=8081
    case "$NODE" in
      node1) PORT=8081 ;;
      node2) PORT=8082 ;;
      node3) PORT=8083 ;;
      *) echo "‚ùå Invalid node. Use: node1, node2, or node3"; exit 1 ;;
    esac

    echo "üîÑ Syncing $NODE with peers..."
    curl -s "http://localhost:$PORT/sync" | jq .
    ;;

  peers)
    NODE=${1:-node1}

    PORT=8081
    case "$NODE" in
      node1) PORT=8081 ;;
      node2) PORT=8082 ;;
      node3) PORT=8083 ;;
      *) echo "‚ùå Invalid node. Use: node1, node2, or node3"; exit 1 ;;
    esac

    echo "üåê Peers of $NODE:"
    curl -s "http://localhost:$PORT/peers" | jq .
    ;;

  test)
    echo "üß™ Running tests..."
    cargo test
    ;;

  run)
    echo "‚ñ∂Ô∏è  Running single node locally (without Docker)..."
    cargo run
    ;;

  check)
    echo "‚úÖ Checking code..."
    cargo check
    ;;

  fmt)
    echo "üé® Formatting code..."
    cargo fmt
    ;;

  demo)
    echo "üé¨ Running demo scenario..."
    echo ""

    echo "1Ô∏è‚É£  Mining block on node1..."
    curl -X POST "http://localhost:8081/mine" \
      -H "Content-Type: application/json" \
      -d '{"data": "Alice sends 10 coins to Bob"}' 2>/dev/null | jq .

    echo ""
    echo "2Ô∏è‚É£  Waiting for propagation..."
    sleep 2

    echo ""
    echo "3Ô∏è‚É£  Mining block on node2..."
    curl -X POST "http://localhost:8082/mine" \
      -H "Content-Type: application/json" \
      -d '{"data": "Bob sends 5 coins to Charlie"}' 2>/dev/null | jq .

    echo ""
    echo "4Ô∏è‚É£  Checking all node chains..."
    sleep 2

    for node in node1 node2 node3; do
      port=$((8080 + ${node:4}))
      echo ""
      echo "üìä $node chain length:"
      curl -s "http://localhost:$port/chain" | jq '.chain | length'
    done
    ;;

  help|--help|-h)
    echo "Goud Chain - Distributed Blockchain Network"
    echo ""
    echo "Usage: ./run [command] [args]"
    echo ""
    echo "Network Commands:"
    echo "  (no args)           Start the 3-node network (production)"
    echo "  start               Start the network (production mode)"
    echo "  dev                 Start the network (development mode with hot reload)"
    echo "  build               Build Docker images"
    echo "  down, stop          Stop the network"
    echo "  clean               Remove all containers, images, and volumes"
    echo "  logs [node]         Show logs (optional: node1, node2, node3)"
    echo "  status              Show status of all nodes"
    echo ""
    echo "Blockchain Commands:"
    echo "  mine [node] [data]  Mine a block (default: node1)"
    echo "  chain [node]        View blockchain (default: node1)"
    echo "  sync [node]         Sync with peers (default: node1)"
    echo "  peers [node]        View peers (default: node1)"
    echo ""
    echo "Development Commands:"
    echo "  test                Run cargo tests"
    echo "  run                 Run single node locally"
    echo "  check               Check code with cargo"
    echo "  fmt                 Format code"
    echo ""
    echo "Demo:"
    echo "  demo                Run a demo scenario"
    echo ""
    echo "Examples:"
    echo "  ./run                              # Start network (production)"
    echo "  ./run dev                          # Start with hot reload"
    echo "  ./run mine node1 \"Hello World\"     # Mine on node1"
    echo "  ./run chain node2                  # View node2's chain"
    echo "  ./run status                       # Check all nodes"
    echo "  ./run logs node1                   # View node1 logs"
    ;;

  *)
    echo "‚ùå Unknown command: $COMMAND"
    echo "Run './run help' for available commands"
    exit 1
    ;;
esac
