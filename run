#!/bin/bash

set -e

COMMAND=${1:-start}
shift || true

case "$COMMAND" in
  start)
    echo "[START] Starting Goud Chain network (production mode)..."
    echo ""
    echo "[CONFIG] Generating latest configs from templates..."
    ./config/scripts/generate-configs.sh local
    echo ""
    echo "[API] LOAD BALANCER (Primary API): http://localhost:8080"
    echo "   â””â”€ Use this endpoint for all blockchain operations"
    echo ""
    echo "[WEB] Dashboard: http://localhost:3000"
    echo ""
    echo "[DEBUG] Individual Nodes (for debugging):"
    echo "   Node 1: http://localhost:8081"
    echo "   Node 2: http://localhost:8082"
    echo "   Node 3: http://localhost:8083"
    echo ""
    docker compose -f docker-compose.local.yml up --build
    ;;

  dev)
    echo "[HOT] Starting Goud Chain network (development mode with hot reload)..."
    echo ""
    echo "[CONFIG] Generating latest configs from templates..."
    ./config/scripts/generate-configs.sh local
    echo ""
    echo "[API] LOAD BALANCER (Primary API): http://localhost:8080"
    echo "   â””â”€ Use this endpoint for all blockchain operations"
    echo ""
    echo "[WEB] Dashboard: http://localhost:3000"
    echo ""
    echo "[JUPYTER] Jupyter Lab: http://localhost:8888"
    echo "   â””â”€ API testing notebooks and experiments"
    echo ""
    echo "[DEBUG] Individual Nodes (for debugging):"
    echo "   Node 1: http://localhost:8081"
    echo "   Node 2: http://localhost:8082"
    echo "   Node 3: http://localhost:8083"
    echo ""
    echo "[DEV] Hot reload enabled (DEBUG MODE):"
    echo "   - Dashboard: Changes to dashboard/ will auto-reload"
    echo "   - Nodes: Changes to src/ will auto-recompile and restart (~5-10s)"
    echo "   - Notebooks: Edit in VS Code, run in Jupyter browser"
    echo "   [WARN]  Debug builds are 10-100x slower (use './run dev-perf' for production speed)"
    echo ""
    docker compose -f docker-compose.local.yml -f docker-compose.local.dev.yml up --build
    ;;

  dev-perf)
    echo "[START] Starting Goud Chain network (development mode with RELEASE builds)..."
    echo ""
    echo "[CONFIG] Generating latest configs from templates..."
    ./config/scripts/generate-configs.sh local
    echo ""
    echo "[API] LOAD BALANCER (Primary API): http://localhost:8080"
    echo "   â””â”€ Use this endpoint for all blockchain operations"
    echo ""
    echo "[WEB] Dashboard: http://localhost:3000"
    echo ""
    echo "[JUPYTER] Jupyter Lab: http://localhost:8888"
    echo "   â””â”€ API testing notebooks and experiments"
    echo ""
    echo "[DEBUG] Individual Nodes (for debugging):"
    echo "   Node 1: http://localhost:8081"
    echo "   Node 2: http://localhost:8082"
    echo "   Node 3: http://localhost:8083"
    echo ""
    echo "[DEV] Hot reload enabled (RELEASE MODE):"
    echo "   - Dashboard: Changes to dashboard/ will auto-reload"
    echo "   - Nodes: Changes to src/ will auto-recompile (~30-60s) with optimizations"
    echo "   - Notebooks: Edit in VS Code, run in Jupyter browser"
    echo "   [API] Release builds match production performance (~20-50ms block creation)"
    echo ""
    docker compose -f docker-compose.local.yml -f docker-compose.local.dev.yml -f docker-compose.local.dev-perf.yml up --build
    ;;

  build)
    echo "[BUILD] Building Docker images..."
    docker compose -f docker-compose.local.yml build
    ;;

  down|stop)
    echo "[STOP] Stopping Goud Chain network..."
    docker compose -f docker-compose.local.yml down
    ;;

  clean)
    echo "[CLEAN] Cleaning up containers, images, and volumes..."
    docker compose -f docker-compose.local.yml down --rmi all --volumes --remove-orphans
    ;;

  logs)
    NODE=${1:-}
    if [ -z "$NODE" ]; then
      echo "[CONFIG] Showing logs from all nodes..."
      docker compose -f docker-compose.local.yml logs -f
    else
      echo "[CONFIG] Showing logs from $NODE..."
      docker compose -f docker-compose.local.yml logs -f "$NODE"
    fi
    ;;

  status)
    echo "[STATUS] Network Status"
    echo "================="
    echo ""

    # Check load balancer
    echo "[API] Load Balancer (http://localhost:8080)"
    if curl -s "http://localhost:8080/lb/health" > /dev/null 2>&1; then
      LB_INFO=$(curl -s "http://localhost:8080/lb/health")
      echo "   [OK] Online"
      echo "   $(echo $LB_INFO | jq -r '.service')"
    else
      echo "   [ERR] Offline"
    fi
    echo ""

    # Check individual nodes
    for node in node1 node2 node3; do
      port=$((8080 + ${node:4}))
      echo "[NODE] $node (http://localhost:$port)"

      if curl -s "http://localhost:$port/health" > /dev/null 2>&1; then
        HEALTH=$(curl -s "http://localhost:$port/health")
        CHAIN_LENGTH=$(echo $HEALTH | jq -r '.chain_length')
        PEERS=$(echo $HEALTH | jq -r '.peer_count')
        NODE_ID=$(echo $HEALTH | jq -r '.node_id')
        echo "   [OK] Online | Chain Length: $CHAIN_LENGTH | Peers: $PEERS | ID: $NODE_ID"
      else
        echo "   [ERR] Offline"
      fi
      echo ""
    done
    ;;

  lb-status)
    echo "[API] Load Balancer Status"
    echo "======================"
    echo ""

    if curl -s "http://localhost:8080/lb/health" > /dev/null 2>&1; then
      echo "Health:"
      curl -s "http://localhost:8080/lb/health" | jq .
      echo ""
      echo "NGINX Stats:"
      curl -s "http://localhost:8080/lb/status"
    else
      echo "[ERR] Load balancer is offline"
      exit 1
    fi
    ;;

  mine)
    NODE=${1:-node1}
    DATA=${2:-"Transaction data"}

    PORT=8081
    case "$NODE" in
      node1) PORT=8081 ;;
      node2) PORT=8082 ;;
      node3) PORT=8083 ;;
      *) echo "[ERR] Invalid node. Use: node1, node2, or node3"; exit 1 ;;
    esac

    echo "Mining block on $NODE with data: \"$DATA\""
    curl -X POST "http://localhost:$PORT/mine" \
      -H "Content-Type: application/json" \
      -d "{\"data\": \"$DATA\"}" | jq .
    ;;

  chain)
    NODE=${1:-node1}

    PORT=8081
    case "$NODE" in
      node1) PORT=8081 ;;
      node2) PORT=8082 ;;
      node3) PORT=8083 ;;
      *) echo "[ERR] Invalid node. Use: node1, node2, or node3"; exit 1 ;;
    esac

    echo "Blockchain from $NODE:"
    curl -s "http://localhost:$PORT/chain" | jq .
    ;;

  sync)
    NODE=${1:-node1}

    PORT=8081
    case "$NODE" in
      node1) PORT=8081 ;;
      node2) PORT=8082 ;;
      node3) PORT=8083 ;;
      *) echo "[ERR] Invalid node. Use: node1, node2, or node3"; exit 1 ;;
    esac

    echo "Syncing $NODE with peers..."
    curl -s "http://localhost:$PORT/sync" | jq .
    ;;

  peers)
    NODE=${1:-node1}

    PORT=8081
    case "$NODE" in
      node1) PORT=8081 ;;
      node2) PORT=8082 ;;
      node3) PORT=8083 ;;
      *) echo "[ERR] Invalid node. Use: node1, node2, or node3"; exit 1 ;;
    esac

    echo "Peers of $NODE:"
    curl -s "http://localhost:$PORT/peers" | jq .
    ;;

  test)
    echo "ðŸ§ª Running tests..."
    cargo test
    ;;

  run)
    echo "Running single node locally (without Docker)..."
    cargo run
    ;;

  check)
    echo "Checking code..."
    cargo check
    ;;

  fmt)
    echo "[FMT] Formatting code..."
    cargo fmt
    ;;

  demo)
    echo "[DEMO] Running demo scenario..."
    echo ""

    echo "[1/4] Mining block on node1..."
    curl -X POST "http://localhost:8081/mine" \
      -H "Content-Type: application/json" \
      -d '{"data": "Alice sends 10 coins to Bob"}' 2>/dev/null | jq .

    echo ""
    echo "[2/4] Waiting for propagation..."
    sleep 2

    echo ""
    echo "[3/4] Mining block on node2..."
    curl -X POST "http://localhost:8082/mine" \
      -H "Content-Type: application/json" \
      -d '{"data": "Bob sends 5 coins to Charlie"}' 2>/dev/null | jq .

    echo ""
    echo "[4/4] Checking all node chains..."
    sleep 2

    for node in node1 node2 node3; do
      port=$((8080 + ${node:4}))
      echo ""
      echo "$node chain length:"
      curl -s "http://localhost:$port/chain" | jq '.chain | length'
    done
    ;;

  help|--help|-h)
    echo "Goud Chain - Distributed Blockchain Network with Load Balancer"
    echo ""
    echo "Usage: ./run [command] [args]"
    echo ""
    echo "[START] PRIMARY API ENDPOINT: http://localhost:8080 (NGINX Load Balancer)"
    echo ""
    echo "Network Commands:"
    echo "  (no args)           Start the 3-node network (production)"
    echo "  start               Start the network (production mode)"
    echo "  dev                 Start with hot reload (DEBUG - fast rebuilds, slow runtime)"
    echo "  dev-perf            Start with hot reload (RELEASE - slow rebuilds, fast runtime)"
    echo "  build               Build Docker images"
    echo "  down, stop          Stop the network"
    echo "  clean               Remove all containers, images, and volumes"
    echo "  logs [node]         Show logs (optional: node1, node2, node3, nginx)"
    echo "  status              Show status of load balancer and all nodes"
    echo "  lb-status           Show detailed load balancer status and metrics"
    echo ""
    echo "Blockchain Commands:"
    echo "  mine [node] [data]  Mine a block (default: node1)"
    echo "  chain [node]        View blockchain (default: node1)"
    echo "  sync [node]         Sync with peers (default: node1)"
    echo "  peers [node]        View peers (default: node1)"
    echo ""
    echo "Development Commands:"
    echo "  test                Run cargo tests"
    echo "  run                 Run single node locally"
    echo "  check               Check code with cargo"
    echo "  fmt                 Format code"
    echo ""
    echo "Demo:"
    echo "  demo                Run a demo scenario"
    echo ""
    echo "Examples:"
    echo "  ./run                              # Start network (production)"
    echo "  ./run dev                          # Start with hot reload (fast iteration)"
    echo "  ./run dev-perf                     # Start with hot reload (performance testing)"
    echo "  ./run status                       # Check load balancer + all nodes"
    echo "  ./run lb-status                    # Detailed load balancer stats"
    echo "  ./run logs nginx                   # View load balancer logs"
    echo "  ./run mine node1 \"Hello World\"     # Mine on node1"
    echo "  ./run chain node2                  # View node2's chain"
    echo ""
    echo "ðŸ“– For developers: Use http://localhost:8080 for all API calls"
    echo "   The load balancer automatically routes requests to healthy nodes"
    ;;

  *)
    echo "[ERR] Unknown command: $COMMAND"
    echo "Run './run help' for available commands"
    exit 1
    ;;
esac
