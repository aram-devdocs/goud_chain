# Goud Chain Load Balancer Configuration
# Generated from template - DO NOT EDIT MANUALLY
# Environment: {{ENV}}
# Generated: {{GENERATION_TIMESTAMP}}

# Worker configuration
worker_processes {{NGINX_WORKER_PROCESSES}};
error_log /var/log/nginx/error.log {{NGINX_ERROR_LOG_LEVEL}};
pid /var/run/nginx.pid;

events {
    worker_connections {{NGINX_WORKER_CONNECTIONS}};
    use epoll;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/json;

    # Logging format with timing information
    log_format blockchain '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         'upstream=$upstream_addr '
                         'upstream_response_time=$upstream_response_time '
                         'request_time=$request_time';

    access_log /var/log/nginx/access.log blockchain;

    # Performance settings
    sendfile {{NGINX_SENDFILE}};
    tcp_nopush {{NGINX_TCP_NOPUSH}};
    tcp_nodelay {{NGINX_TCP_NODELAY}};
    keepalive_timeout {{NGINX_KEEPALIVE_TIMEOUT}};
    types_hash_max_size {{NGINX_TYPES_HASH_MAX_SIZE}};

    # Buffer settings for blockchain data
    client_body_buffer_size {{NGINX_CLIENT_BODY_BUFFER_SIZE}};
    client_max_body_size {{NGINX_CLIENT_MAX_BODY_SIZE}};

    # Upstream pool - all blockchain nodes (hash-based routing for PoA)
    # Hash distribution approximates PoA validator rotation
    # When a request hits the wrong validator, node forwards internally via P2P
    upstream blockchain_nodes {
        # Hash-based routing on client IP for write request distribution
        {{NGINX_HASH_METHOD}};

{{UPSTREAM_NODES}}

        # Connection pooling
        keepalive {{NGINX_KEEPALIVE_CONNECTIONS}};
        keepalive_requests {{NGINX_KEEPALIVE_REQUESTS}};
        keepalive_timeout {{NGINX_KEEPALIVE_TIMEOUT_UPSTREAM}};
    }

    # Upstream pool for read-only operations
    upstream blockchain_readers {
        # Round-robin for even distribution
{{UPSTREAM_READERS}}

        # Connection pooling
        keepalive {{NGINX_KEEPALIVE_CONNECTIONS}};
    }

{{DASHBOARD_SERVER_BLOCK}}

    # API server block (default for all other requests)
    server {
        listen {{NGINX_API_PORT}} default_server;
{{ADDITIONAL_LISTEN}}
        server_name {{API_SERVER_NAME}};

        # Health check endpoint for the load balancer itself
        location /lb/health {
            access_log off;
            return 200 '{"status":"healthy","service":"goud_chain_lb","nodes":{{NODE_COUNT}},"platform":"{{PLATFORM}}","routing":"{{ROUTING_STRATEGY}}"}\\n';
            add_header Content-Type application/json;
        }

        # Validator info endpoint (for monitoring which node should handle writes)
        location /validator/current {
            proxy_pass http://blockchain_readers;

            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            proxy_connect_timeout {{NGINX_PROXY_CONNECT_TIMEOUT_HEALTH}};
            proxy_read_timeout {{NGINX_PROXY_READ_TIMEOUT_HEALTH}};

            # Cache briefly (changes when blocks are added)
            add_header Cache-Control "public, max-age={{NGINX_CACHE_MAX_AGE_VALIDATOR}}";
            include /etc/nginx/cors.conf;
        }

        # Load balancer status (for monitoring)
        location /lb/status {
            stub_status;
            access_log off;
        }

        # WebSocket endpoint - Real-time event streaming with sticky sessions
        # Requires persistent connection to same node (hash-based routing)
        location /ws {
            # Handle CORS preflight (OPTIONS) requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, Sec-WebSocket-Key, Sec-WebSocket-Version, Sec-WebSocket-Protocol" always;
                add_header Content-Length 0;
                return 204;
            }

            # Hash-based routing ensures sticky sessions (WebSocket requires same node)
            proxy_pass http://blockchain_nodes;

            # WebSocket upgrade headers
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Proxy standard headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Extended timeouts for long-lived WebSocket connections (7 days)
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;

            # Disable buffering for real-time WebSocket communication
            proxy_buffering off;

            # CORS headers for browser WebSocket connections
            include /etc/nginx/cors.conf;
        }

{{ACCOUNT_OPERATIONS_ROUTING}}

        # AUDIT API - Authenticated read operations (Phase 4 - Operational Security)
        # Query audit logs for authenticated user
        location /api/audit {
            # Handle CORS preflight (OPTIONS) requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Signature" always;
                add_header Content-Length 0;
                return 204;
            }

            proxy_pass http://blockchain_readers;

            # Proxy headers (auth required)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;

            # Connection reuse
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Timeouts (audit log queries can involve blockchain scanning)
            proxy_connect_timeout {{NGINX_PROXY_CONNECT_TIMEOUT_READ}};
            proxy_send_timeout {{NGINX_PROXY_SEND_TIMEOUT_READ}};
            proxy_read_timeout {{NGINX_PROXY_READ_TIMEOUT_READ}};

            # CORS headers
            include /etc/nginx/cors.conf;

            # No caching (audit logs are user-specific)
            add_header Cache-Control "private, no-store, no-cache, must-revalidate" always;
        }

        # Public metrics endpoint (Phase 4 - Operational Security)
        # Provides dashboard-friendly metrics with CORS support
        location /api/metrics {
            # Handle CORS preflight (OPTIONS) requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Signature" always;
                add_header Content-Length 0;
                return 204;
            }

            proxy_pass http://blockchain_readers/metrics;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Connection reuse
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Timeouts
            proxy_connect_timeout {{NGINX_PROXY_CONNECT_TIMEOUT_READ}};
            proxy_send_timeout {{NGINX_PROXY_SEND_TIMEOUT_READ}};
            proxy_read_timeout {{NGINX_PROXY_READ_TIMEOUT_READ}};

            # CORS headers
            include /etc/nginx/cors.conf;

            # Short cache (5 seconds)
            add_header Cache-Control "public, max-age=5" always;
        }

        # RapiDoc - OpenAPI Documentation (publicly accessible)
        location ~ ^/(rapidoc|api-docs) {
            # Handle CORS preflight (OPTIONS) requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type" always;
                add_header Content-Length 0;
                return 204;
            }

            proxy_pass http://blockchain_readers;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Connection reuse
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Timeouts
            proxy_connect_timeout {{NGINX_PROXY_CONNECT_TIMEOUT_READ}};
            proxy_send_timeout {{NGINX_PROXY_SEND_TIMEOUT_READ}};
            proxy_read_timeout {{NGINX_PROXY_READ_TIMEOUT_READ}};

            # CORS headers
            include /etc/nginx/cors.conf;

            # Cache static RapiDoc assets (1 hour)
            add_header Cache-Control "public, max-age=3600" always;
        }

        # Internal metrics endpoint - Monitoring only (block external access)
        location = /metrics {
            # Allow only internal Docker network
            allow 172.16.0.0/12;
            deny all;

            proxy_pass http://blockchain_nodes;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            access_log off;
        }

        # Prometheus metrics endpoint - Internal monitoring only
        location = /metrics/prometheus {
            # Allow only internal Docker network
            allow 172.16.0.0/12;
            deny all;

            proxy_pass http://blockchain_nodes;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            access_log off;
        }

        # READ operations - Round-robin across all nodes
        location ~ ^/({{READ_ENDPOINTS}})$ {
            # Handle CORS preflight (OPTIONS) requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Signature" always;
                add_header Content-Length 0;
                return 204;
            }

            proxy_pass http://blockchain_readers;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Signature $http_x_signature;

            # Connection reuse
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Timeouts (blockchain reads can take time)
            proxy_connect_timeout {{NGINX_PROXY_CONNECT_TIMEOUT_READ}};
            proxy_send_timeout {{NGINX_PROXY_SEND_TIMEOUT_READ}};
            proxy_read_timeout {{NGINX_PROXY_READ_TIMEOUT_READ}};

            # CORS headers for browser access
            include /etc/nginx/cors.conf;

            # Cache control (blockchain data is eventually consistent)
            add_header Cache-Control "public, max-age={{NGINX_CACHE_MAX_AGE_READ}}, stale-while-revalidate={{NGINX_CACHE_STALE_WHILE_REVALIDATE}}";
        }

        # WRITE operations - Hash-based routing distributes writes across validators
        # PoA validator rotation handled via internal forwarding when needed
        # Hash approximates round-robin while maintaining session affinity
        location ~ ^/({{WRITE_ENDPOINTS}})$ {
            # Handle CORS preflight (OPTIONS) requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Signature" always;
                add_header Content-Length 0;
                return 204;
            }

            proxy_pass http://blockchain_nodes;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Signature $http_x_signature;

            # Connection reuse
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Longer timeouts for write operations (encryption + block creation)
            proxy_connect_timeout {{NGINX_PROXY_CONNECT_TIMEOUT_WRITE}};
            proxy_send_timeout {{NGINX_PROXY_SEND_TIMEOUT_WRITE}};
            proxy_read_timeout {{NGINX_PROXY_READ_TIMEOUT_WRITE}};

            # Buffering settings
            proxy_buffering on;
            proxy_buffer_size {{NGINX_PROXY_BUFFER_SIZE}};
            proxy_buffers {{NGINX_PROXY_BUFFERS}};

            # CORS headers
            include /etc/nginx/cors.conf;

            # No caching for write operations
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;
        }

        # Health check endpoint - proxy to any node
        location /health {
            proxy_pass http://blockchain_nodes/health;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            proxy_connect_timeout {{NGINX_PROXY_CONNECT_TIMEOUT_HEALTH}};
            proxy_read_timeout {{NGINX_PROXY_READ_TIMEOUT_HEALTH}};

            access_log off;
        }

        # OPTIONS preflight requests (CORS)
        location / {
            if ($request_method = OPTIONS) {
                include /etc/nginx/cors.conf;
                add_header Content-Length 0;
                return 204;
            }

            # For any other path, proxy to blockchain nodes
            proxy_pass http://blockchain_nodes;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # CORS
            include /etc/nginx/cors.conf;
        }

        # Error pages
        error_page 502 503 504 /50x.json;
        location = /50x.json {
            return 503 '{"error":"Service temporarily unavailable","message":"All blockchain nodes are down or unreachable"}\\n';
            add_header Content-Type application/json always;
        }
    }
}
