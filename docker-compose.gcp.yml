# Docker Compose for Goud Chain on Google Cloud Platform e2-micro (1GB RAM)
# Generated from template - DO NOT EDIT MANUALLY
# Writer/Reader architecture: node1 (writer), node2 (reader)
# Conservative allocation with 150M safety margin for OS + Docker
# Generated: 2025-10-18 05:00:03 UTC
#
# Usage:

# YAML anchors for reusable configuration
x-logging: &default-logging
  driver: json-file
  options:
    max-size: "5m"
    max-file: "2"

x-node-base: &node-base
  image: goud-chain:latest
  build:
    context: .
    dockerfile: Dockerfile
  networks:
    - goud_network
  restart: unless-stopped
  logging: *default-logging
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 30s

x-nginx-base: &nginx-base
  image: nginx:alpine
  networks:
    - goud_network
  restart: unless-stopped
  logging: *default-logging
  healthcheck:
    test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/lb/health"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 10s

x-dashboard-base: &dashboard-base
  image: goud-chain-dashboard:latest
  build:
    context: ./web
    dockerfile: Dockerfile
  networks:
    - goud_network
  restart: unless-stopped
  logging: *default-logging
  healthcheck:
    test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
    interval: 15s
    timeout: 10s
    retries: 3
    start_period: 10s

#   docker-compose -f docker-compose.gcp.yml up -d

version: '3.8'

services:
  # NGINX Load Balancer - Primary API endpoint
  nginx:
    <<: *nginx-base
    container_name: goud_nginx_lb
    ports:
      - "80:80"       # For Cloudflare proxy
      - "8080:8080"   # For direct IP access
    volumes:
      - ./nginx/nginx.gcp.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/cors.conf:/etc/nginx/cors.conf:ro
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 32M
        reservations:
          cpus: '0.05'
          memory: 24M

  # Dashboard - Web UI
  dashboard:
    <<: *dashboard-base
    container_name: goud_dashboard
    ports:
      - "3000:80"
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 48M

  # Blockchain Node 1 - PRIMARY WRITER (handles all write operations)
  node1:
    <<: *node-base
    container_name: goud_node1
    environment:
      - NODE_ID=node1
      - HTTP_PORT=8080
      - P2P_PORT=9000
      - PEERS=goud_node2:9000
      - NODE1_ADDR=goud_node1:8080
      - NODE2_ADDR=goud_node2:8080
    ports:
      - "8081:8080"
      - "9001:9000"
    volumes:
      - node1_data:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 384M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Blockchain Node 2 - PASSIVE READER (read-only, syncs via P2P)
  node2:
    <<: *node-base
    container_name: goud_node2
    environment:
      - NODE_ID=node2
      - HTTP_PORT=8080
      - P2P_PORT=9000
      - PEERS=goud_node1:9000
      - NODE1_ADDR=goud_node1:8080
      - NODE2_ADDR=goud_node2:8080
    ports:
      - "8082:8080"
      - "9002:9000"
    volumes:
      - node2_data:/data
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 256M
        reservations:
          cpus: '0.15'
          memory: 192M

networks:
  goud_network:
    driver: bridge

volumes:
  node1_data:
    driver: local
  node2_data:
    driver: local
