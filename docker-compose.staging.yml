# Staging environment - Oracle Cloud (3 nodes + nginx + dashboard)
# For pre-production testing

version: '3.8'

services:
  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: goud_nginx_lb
    ports:
      - "8080:8080"
    volumes:
      - ./nginx/nginx-staging.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - node1
      - node2
      - node3
    networks:
      - goud_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/lb/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Dashboard
  dashboard:
    build: ./dashboard
    container_name: goud_dashboard
    ports:
      - "3000:8080"
    networks:
      - goud_network
    depends_on:
      - nginx
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Blockchain Node 1
  node1:
    build:
      context: .
      dockerfile: Dockerfile
    image: goud-chain:latest
    container_name: goud_node1
    environment:
      - NODE_ID=node1
      - HTTP_PORT=8080
      - P2P_PORT=9000
      - PEERS=node2:9000,node3:9000
    ports:
      - "8081:8080"
      - "9001:9000"
    volumes:
      - /data/node1:/data
    networks:
      - goud_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.7'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Blockchain Node 2
  node2:
    build:
      context: .
      dockerfile: Dockerfile
    image: goud-chain:latest
    container_name: goud_node2
    environment:
      - NODE_ID=node2
      - HTTP_PORT=8080
      - P2P_PORT=9000
      - PEERS=node1:9000,node3:9000
    ports:
      - "8082:8080"
      - "9002:9000"
    volumes:
      - /data/node2:/data
    networks:
      - goud_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.7'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Blockchain Node 3
  node3:
    build:
      context: .
      dockerfile: Dockerfile
    image: goud-chain:latest
    container_name: goud_node3
    environment:
      - NODE_ID=node3
      - HTTP_PORT=8080
      - P2P_PORT=9000
      - PEERS=node1:9000,node2:9000
    ports:
      - "8083:8080"
      - "9003:9000"
    volumes:
      - /data/node3:/data
    networks:
      - goud_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.7'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  goud_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
