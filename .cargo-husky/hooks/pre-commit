#!/bin/sh

# Rust checks
echo "Running Rust formatting..."
# Format all Rust code
cargo fmt

# Detect which Rust files were modified by formatting
formatted_files=$(git diff --name-only | grep '\.rs$' || true)
if [ -n "$formatted_files" ]; then
    echo "Formatted files: $formatted_files"
    echo "$formatted_files" | xargs git add
    echo "Formatted files have been added to staging."
else
    echo "Code is already properly formatted."
fi

echo "Running Clippy (warnings as errors)..."
cargo clippy --all-targets --all-features -- -D warnings || {
    echo "Error: Clippy found issues. Run 'cargo clippy --all-targets --all-features -- -D warnings' to see them."
    exit 1
}

echo "Running Rust tests (including circular dependency checks)..."
# Use cargo-nextest if available (matches CI/CD), fallback to cargo test
if command -v cargo-nextest >/dev/null 2>&1; then
    cargo nextest run --all-targets --all-features || {
        echo "Error: Tests failed."
        exit 1
    }
else
    echo "cargo-nextest not found, using cargo test (install nextest for CI/CD parity: cargo install cargo-nextest)"
    cargo test --all-targets --all-features || {
        echo "Error: Tests failed."
        exit 1
    }
fi

echo "Running cargo audit (security vulnerabilities)..."
if command -v cargo-audit >/dev/null 2>&1; then
    cargo audit || {
        echo "Error: Security vulnerabilities found. Run 'cargo audit' for details."
        exit 1
    }
else
    echo "cargo-audit not installed, skipping (requires Rust 1.83+ for edition2024)"
fi

echo "Building Rust project..."
cargo build || {
    echo "Error: Build failed."
    exit 1
}

echo "Generating module dependency graph..."
./scripts/generate_module_graph.sh || {
    echo "Warning: Failed to generate module graph (non-fatal)"
}

# Stage the module graph if it changed
if [ -f "docs/module-structure.png" ]; then
    git add docs/module-structure.png docs/module-structure.dot
fi

# Config generation checks
if git diff --cached --name-only | grep -qE "^config/(base|environments)/"; then
    echo "Config templates changed, regenerating configs..."
    ./config/scripts/generate-configs.sh all || {
        echo "Error: Config generation failed."
        exit 1
    }

    # Stage generated configs
    git add nginx/nginx.local.conf nginx/nginx.gcp.conf
    git add docker-compose.local.yml docker-compose.gcp.yml

    echo "âœ… Generated configs staged for commit"
fi

# Frontend checks (if web/ directory exists and has changes)
if [ -d "web" ] && git diff --cached --name-only | grep -q "^web/"; then
    echo "Running frontend validation..."
    cd web
    
    # Check if node_modules exists
    if [ ! -d "node_modules" ]; then
        echo "Installing frontend dependencies..."
        pnpm install --frozen-lockfile
    fi
    
    echo "Checking code formatting..."
    pnpm format:check || {
        echo "Error: Frontend code is not formatted. Run 'cd web && pnpm format' to fix."
        cd ..
        exit 1
    }
    
    echo "Running ESLint..."
    pnpm lint || {
        echo "Error: ESLint found issues. Run 'cd web && pnpm lint:fix' to attempt auto-fix."
        cd ..
        exit 1
    }
    
    echo "Type checking..."
    pnpm type-check || {
        echo "Error: TypeScript type check failed."
        cd ..
        exit 1
    }
    
    cd ..
fi

# Terraform checks
if [ -d "terraform" ] && command -v terraform >/dev/null 2>&1; then
    echo "Running Terraform format check..."
    terraform -chdir=terraform fmt -check -recursive || {
        echo "Error: Terraform files are not formatted. Run 'terraform fmt -recursive' in terraform/ to fix."
        exit 1
    }

    echo "Running Terraform validation..."
    if [ -d "terraform/environments/dev" ]; then
        terraform -chdir=terraform/environments/dev init -backend=false -upgrade=false > /dev/null 2>&1 || true
        terraform -chdir=terraform/environments/dev validate || {
            echo "Error: Terraform validation failed for dev environment."
            exit 1
        }
    fi
else
    echo "Terraform not installed, skipping validation"
fi

echo "All pre-commit checks passed!"
