#!/bin/sh

# Rust checks
echo "Running Rust formatting check..."
cargo fmt -- --check || {
    echo "Error: Code is not formatted. Run 'cargo fmt' to fix."
    exit 1
}

echo "Running Clippy (warnings as errors)..."
cargo clippy --all-targets -- -D warnings || {
    echo "Error: Clippy found issues. Run 'cargo clippy --all-targets -- -D warnings' to see them."
    exit 1
}

echo "Running Rust tests (including circular dependency checks)..."
cargo test || {
    echo "Error: Tests failed."
    exit 1
}

echo "Running cargo audit (security vulnerabilities)..."
if ! command -v cargo-audit >/dev/null 2>&1; then
    echo "Installing cargo-audit..."
    cargo install cargo-audit
fi
cargo audit || {
    echo "Error: Security vulnerabilities found. Run 'cargo audit' for details."
    exit 1
}

echo "Building Rust project..."
cargo build || {
    echo "Error: Build failed."
    exit 1
}

echo "Generating module dependency graph..."
./scripts/generate_module_graph.sh || {
    echo "Warning: Failed to generate module graph (non-fatal)"
}

# Stage the module graph if it changed
if [ -f "docs/module-structure.png" ]; then
    git add docs/module-structure.png docs/module-structure.dot
fi

# Config generation checks
if git diff --cached --name-only | grep -qE "^config/(base|environments)/"; then
    echo "Config templates changed, regenerating configs..."
    ./config/scripts/generate-configs.sh all || {
        echo "Error: Config generation failed."
        exit 1
    }

    # Stage generated configs
    git add nginx/nginx.local.conf nginx/nginx.gcp.conf
    git add docker-compose.local.yml docker-compose.gcp.yml

    echo "âœ… Generated configs staged for commit"
fi

# Dashboard checks
echo "Running dashboard tests..."
./dashboard/test.sh || {
    echo "Error: Dashboard tests failed."
    exit 1
}

# Terraform checks
if [ -d "terraform" ]; then
    echo "Running Terraform format check..."
    terraform -chdir=terraform fmt -check -recursive || {
        echo "Error: Terraform files are not formatted. Run 'terraform fmt -recursive' in terraform/ to fix."
        exit 1
    }

    echo "Running Terraform validation..."
    if [ -d "terraform/environments/dev" ]; then
        terraform -chdir=terraform/environments/dev init -backend=false -upgrade=false > /dev/null 2>&1 || true
        terraform -chdir=terraform/environments/dev validate || {
            echo "Error: Terraform validation failed for dev environment."
            exit 1
        }
    fi
fi

echo "All pre-commit checks passed!"
