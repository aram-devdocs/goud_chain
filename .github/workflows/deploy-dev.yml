# Deploy to Google Cloud Platform Development Environment
# Triggered manually or on push to main branch (after tests pass)

name: Deploy Dev

on:
  workflow_dispatch:  # Manual trigger
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types:
      - completed
    branches: [ main ]

env:
  ENVIRONMENT: dev
  TERRAFORM_VERSION: 1.6.6
  GCP_REGION: us-central1
  GCP_ZONE: us-central1-a

jobs:
  # Terraform plan and apply
  terraform-deploy:
    # Only run if build succeeded (or if manually triggered)
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main')
    name: Terraform Deploy
    runs-on: ubuntu-latest
    environment: dev

    defaults:
      run:
        working-directory: ./terraform/environments/dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Create Terraform variables file
        run: |
          # Pre-process values for Terraform (functions not allowed in .tfvars)
          REPOSITORY_SAFE="${{ github.repository }}"
          REPOSITORY_SAFE="${REPOSITORY_SAFE//\//_}"
          COMMIT_SHORT="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_SHORT:0:8}"

          cat > terraform.tfvars <<EOF
          # GCP Configuration
          project_id    = "${{ secrets.GCP_PROJECT_ID }}"
          region        = "${{ env.GCP_REGION }}"
          zone          = "${{ env.GCP_ZONE }}"

          # Environment
          environment   = "dev"
          project_name  = "goud-chain"

          # Compute
          machine_type      = "e2-micro"
          boot_disk_size_gb = 30

          # SSH Access
          ssh_username   = "ubuntu"
          ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"

          # Network Security
          allowed_ssh_cidrs  = ["0.0.0.0/0"]
          allowed_http_cidrs = ["0.0.0.0/0"]

          # DNS Configuration (Cloudflare)
          enable_dns              = true
          domain_name             = "goudchain.com"
          cloudflare_api_token    = "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          cloudflare_zone_id      = "${{ secrets.CLOUDFLARE_ZONE_ID }}"
          enable_cloudflare_proxy = true
          dashboard_subdomain     = "dashboard"
          api_subdomain           = "api"

          # Tags (GCP labels: lowercase, numbers, underscores, dashes only)
          tags = {
            project     = "goud-chain"
            environment = "dev"
            managed_by  = "github-actions"
            repository  = "${REPOSITORY_SAFE}"
            deployed_by = "${{ github.actor }}"
            commit_sha  = "${COMMIT_SHORT}"
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: outputs
        run: |
          echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
          echo "load_balancer_url=$(terraform output -raw load_balancer_url)" >> $GITHUB_OUTPUT
          echo "dashboard_url=$(terraform output -raw dashboard_url)" >> $GITHUB_OUTPUT

      - name: Save outputs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: |
            terraform/environments/dev/terraform.tfstate
            terraform/environments/dev/tfplan

    outputs:
      instance_ip: ${{ steps.outputs.outputs.instance_ip }}
      load_balancer_url: ${{ steps.outputs.outputs.load_balancer_url }}
      dashboard_url: ${{ steps.outputs.outputs.dashboard_url }}

  # Deploy Docker containers to GCP VM
  deploy-containers:
    name: Deploy Containers
    runs-on: ubuntu-latest
    needs: terraform-deploy
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/goud_chain_rsa
          chmod 600 ~/.ssh/goud_chain_rsa

          # Verify key format
          echo "SSH key validation:"
          head -1 ~/.ssh/goud_chain_rsa
          tail -1 ~/.ssh/goud_chain_rsa

          # Add host to known_hosts
          ssh-keyscan -H ${{ needs.terraform-deploy.outputs.instance_ip }} >> ~/.ssh/known_hosts

      - name: Wait for VM startup (Docker installation)
        run: |
          echo "Waiting for VM to complete startup script..."
          sleep 120

          # Verify SSH connectivity
          ssh -i ~/.ssh/goud_chain_rsa -o ConnectTimeout=10 ubuntu@${{ needs.terraform-deploy.outputs.instance_ip }} "echo 'SSH connection successful'"

      - name: Wait for Docker to be ready
        run: |
          ssh -i ~/.ssh/goud_chain_rsa ubuntu@${{ needs.terraform-deploy.outputs.instance_ip }} << 'EOF'
            echo "Checking Docker availability..."
            timeout 180 bash -c 'until docker ps >/dev/null 2>&1; do echo "Waiting for Docker..."; sleep 5; done' || {
              echo "Docker not ready, attempting to start..."
              sudo systemctl start docker
              sleep 10
            }

            docker --version
            docker-compose --version
            docker ps
          EOF

      - name: Deploy application to GCP VM
        env:
          USE_PREBUILT_IMAGES: "true"
        run: |
          ssh -i ~/.ssh/goud_chain_rsa ubuntu@${{ needs.terraform-deploy.outputs.instance_ip }} << 'EOF'
            set -e

            # Enable pre-built image mode
            export USE_PREBUILT_IMAGES=true

            # Create app directory
            sudo mkdir -p /opt/goud-chain
            sudo chown ubuntu:ubuntu /opt/goud-chain
            cd /opt/goud-chain

            # Clone or update repository
            if [ -d .git ]; then
              echo "Updating existing repository..."
              # Reset generated configs (they'll be regenerated after pull)
              git reset --hard HEAD
              git pull origin main
            else
              echo "Cloning repository..."
              git clone ${{ github.server_url }}/${{ github.repository }} .
            fi

            # Create data directory
            sudo mkdir -p /data
            sudo chown ubuntu:ubuntu /data

            # Generate GCP configs from templates
            echo "📋 Generating GCP configs from templates..."
            cd /opt/goud-chain
            chmod +x config/scripts/generate-configs.sh
            ./config/scripts/generate-configs.sh gcp

            # Run deployment script with pre-built images
            # The script will detect USE_PREBUILT_IMAGES and pull from ghcr.io
            bash -c 'cd /opt/goud-chain && source scripts/deploy.sh' || {
              echo "Deployment script failed, trying docker-compose fallback..."
              docker-compose -f docker-compose.gcp.yml up -d
            }

            # Wait for services to start
            sleep 30

            # Show status
            echo "=== Container Status ==="
            docker ps --filter "name=goud_" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          EOF

      - name: Verify deployment
        run: |
          echo "Verifying deployment health..."
          sleep 30

          # Check load balancer health
          echo "Testing load balancer..."
          curl -f http://${{ needs.terraform-deploy.outputs.instance_ip }}:8080/lb/health || exit 1

          # Check blockchain API
          echo "Testing blockchain API..."
          curl -f http://${{ needs.terraform-deploy.outputs.instance_ip }}:8080/health || exit 1

          # Check blockchain endpoint
          echo "Testing blockchain endpoint..."
          curl -f http://${{ needs.terraform-deploy.outputs.instance_ip }}:8080/chain || exit 1

          # Check dashboard
          echo "Testing dashboard..."
          curl -f http://${{ needs.terraform-deploy.outputs.instance_ip }}:3000 || exit 1

          echo "✅ All health checks passed!"

  # Post-deployment notifications and status check
  notify:
    name: Deployment Status Check
    runs-on: ubuntu-latest
    needs: [terraform-deploy, deploy-containers]
    if: always()

    steps:
      - name: Check all jobs succeeded
        run: |
          TERRAFORM_STATUS="${{ needs.terraform-deploy.result }}"
          DEPLOY_STATUS="${{ needs.deploy-containers.result }}"

          echo "### Deployment Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Terraform: $TERRAFORM_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- Container Deploy: $DEPLOY_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$TERRAFORM_STATUS" != "success" ] || [ "$DEPLOY_STATUS" != "success" ]; then
            echo "❌ Deployment failed!"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Deployment Failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "✅ Deployment successful!"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment Successful**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 API Endpoint: ${{ needs.terraform-deploy.outputs.load_balancer_url }}" >> $GITHUB_STEP_SUMMARY
          echo "🌐 Dashboard: ${{ needs.terraform-deploy.outputs.dashboard_url }}" >> $GITHUB_STEP_SUMMARY
          echo "📡 Direct IP: http://${{ needs.terraform-deploy.outputs.instance_ip }}:8080" >> $GITHUB_STEP_SUMMARY
