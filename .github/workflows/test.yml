# Test workflow - runs on every PR and push
# No deployment, just validation

name: Test

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Fast-fail formatting check
  rust-fmt:
    name: Rust Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup show

      - name: Run cargo fmt
        run: cargo fmt -- --check

  # Fast-fail linting check
  rust-clippy:
    name: Rust Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup show

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Run cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Parallel test execution
  rust-test:
    name: Rust Tests
    runs-on: ubuntu-latest
    needs: [rust-fmt, rust-clippy]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup show

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run tests with nextest
        run: cargo nextest run --all-targets --all-features --verbose

  # Docker build test (multi-arch) - only runs if Docker/config files changed
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    # Skip if only Rust/Terraform/docs changed
    if: |
      contains(github.event.head_commit.message, '[skip docker]') == false &&
      (
        github.event_name == 'push' ||
        contains(github.event.pull_request.changed_files, 'Dockerfile') ||
        contains(github.event.pull_request.changed_files, 'docker-compose') ||
        contains(github.event.pull_request.changed_files, 'nginx/') ||
        contains(github.event.pull_request.changed_files, 'config/')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (AMD64)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: goud-chain:test-amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Terraform validation - only runs if Terraform files changed
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    # Skip if only Rust/Docker/docs changed
    if: |
      contains(github.event.head_commit.message, '[skip terraform]') == false &&
      (
        github.event_name == 'push' ||
        contains(github.event.pull_request.changed_files, 'terraform/')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ./terraform

      - name: Terraform Init (dev)
        run: terraform init -backend=false
        working-directory: ./terraform/environments/dev

      - name: Terraform Validate (dev)
        run: terraform validate
        working-directory: ./terraform/environments/dev

  # Security scanning - always run on main/develop, conditional on PRs
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    # Run on main/develop always, or on PRs if Rust/Docker/deps changed
    if: |
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/develop' ||
      contains(github.event.pull_request.changed_files, 'Cargo') ||
      contains(github.event.pull_request.changed_files, 'Dockerfile') ||
      contains(github.event.pull_request.changed_files, 'src/')
    permissions:
      security-events: write  # Required to upload SARIF results to GitHub Security

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          skip-dirs: 'target,tests'  # Skip build artifacts and test fixtures

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
