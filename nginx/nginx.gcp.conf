# Goud Chain Load Balancer Configuration for GCP (2-node setup)
# Provides intelligent routing for PoA blockchain nodes on single VM

# Worker configuration
worker_processes 1; # Optimized for e2-micro 1GB RAM
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 512; # Reduced for low-memory environment
    use epoll;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/json;

    # Logging format with timing information
    log_format blockchain '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         'upstream=$upstream_addr '
                         'upstream_response_time=$upstream_response_time '
                         'request_time=$request_time';

    access_log /var/log/nginx/access.log blockchain;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Buffer settings for blockchain data
    client_body_buffer_size 16K;
    client_max_body_size 1M;

    # Upstream pool - all blockchain nodes (2 nodes)
    upstream blockchain_nodes {
        # Least connections for write operations
        least_conn;

        # Node pool with health checks
        server node1:8080 max_fails=3 fail_timeout=30s;
        server node2:8080 max_fails=3 fail_timeout=30s;

        # Connection pooling (reduced for low memory)
        keepalive 16;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Upstream pool for read-only operations (round-robin)
    upstream blockchain_readers {
        # Round-robin for even distribution
        server node1:8080 max_fails=3 fail_timeout=30s;
        server node2:8080 max_fails=3 fail_timeout=30s;

        # Connection pooling
        keepalive 16;
    }

    # Dashboard server block
    server {
        listen 80;
        listen 8080;
        server_name dev-dashboard.goudchain.com localhost;

        location / {
            proxy_pass http://dashboard:8080;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # CORS
            include /etc/nginx/cors.conf;
        }
    }

    # API server block (default for all other requests)
    server {
        listen 80 default_server;
        listen 8080 default_server;
        server_name dev-api.goudchain.com _;

        # Health check endpoint for the load balancer itself
        location /lb/health {
            access_log off;
            return 200 '{"status":"healthy","service":"goud_chain_lb","nodes":2,"platform":"gcp"}\n';
            add_header Content-Type application/json;
        }

        # Load balancer status (for monitoring)
        location /lb/status {
            stub_status;
            access_log off;
        }

        # READ operations - Round-robin across all nodes
        location ~ ^/(data/list|chain|peers)$ {
            proxy_pass http://blockchain_readers;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Connection reuse
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Timeouts (blockchain reads can take time)
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # CORS headers for browser access
            include /etc/nginx/cors.conf;

            # Cache control (blockchain data is eventually consistent)
            add_header Cache-Control "public, max-age=2, stale-while-revalidate=5";
        }

        # WRITE operations - Least connections (better for stateful writes)
        location ~ ^/(data/submit|data/decrypt|sync)$ {
            proxy_pass http://blockchain_nodes;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Connection reuse
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Longer timeouts for write operations (encryption + block creation)
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Buffering settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;

            # CORS headers
            include /etc/nginx/cors.conf;

            # No caching for write operations
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;
        }

        # Health check endpoint - proxy to any node
        location /health {
            proxy_pass http://blockchain_nodes/health;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;

            access_log off;
        }

        # OPTIONS preflight requests (CORS)
        location / {
            if ($request_method = OPTIONS) {
                include /etc/nginx/cors.conf;
                add_header Content-Length 0;
                return 204;
            }

            # For any other path, proxy to blockchain nodes
            proxy_pass http://blockchain_nodes;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # CORS
            include /etc/nginx/cors.conf;
        }

        # Error pages
        error_page 502 503 504 /50x.json;
        location = /50x.json {
            return 503 '{"error":"Service temporarily unavailable","message":"All blockchain nodes are down or unreachable"}\n';
            add_header Content-Type application/json always;
        }
    }
}
