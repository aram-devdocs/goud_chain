# Goud Chain Load Balancer Configuration - Staging (3 nodes)

worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/json;

    log_format blockchain '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         'upstream=$upstream_addr '
                         'upstream_response_time=$upstream_response_time '
                         'request_time=$request_time';

    access_log /var/log/nginx/access.log blockchain;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    client_body_buffer_size 16K;
    client_max_body_size 1M;

    upstream blockchain_nodes {
        least_conn;
        server node1:8080 max_fails=3 fail_timeout=30s;
        server node2:8080 max_fails=3 fail_timeout=30s;
        server node3:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream blockchain_readers {
        server node1:8080 max_fails=3 fail_timeout=30s;
        server node2:8080 max_fails=3 fail_timeout=30s;
        server node3:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    server {
        listen 8080;
        server_name _;

        location /lb/health {
            access_log off;
            return 200 '{"status":"healthy","service":"goud_chain_lb","environment":"staging","nodes":3}\n';
            add_header Content-Type application/json;
        }

        location /lb/status {
            stub_status;
            access_log off;
        }

        location ~ ^/(data/list|chain|peers)$ {
            proxy_pass http://blockchain_readers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type" always;
            add_header Cache-Control "public, max-age=2, stale-while-revalidate=5";
        }

        location ~ ^/(data/submit|data/decrypt|sync)$ {
            proxy_pass http://blockchain_nodes;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type" always;
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;
        }

        location /health {
            proxy_pass http://blockchain_nodes/health;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            access_log off;
        }

        location / {
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type";
                add_header Content-Length 0;
                return 204;
            }

            proxy_pass http://blockchain_nodes;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type" always;
        }

        error_page 502 503 504 /50x.json;
        location = /50x.json {
            return 503 '{"error":"Service temporarily unavailable","message":"All blockchain nodes are down or unreachable"}\n';
            add_header Content-Type application/json always;
        }
    }
}
