services:
  # NGINX Load Balancer - Single API endpoint for all nodes
  nginx:
    image: nginx:alpine
    container_name: goud_nginx_lb
    ports:
      - "8080:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - node1
      - node2
      - node3
    networks:
      - goud_network
    restart: unless-stopped

  dashboard:
    build: ./dashboard
    container_name: goud_dashboard
    ports:
      - "3000:8080"
    networks:
      - goud_network
    depends_on:
      - nginx

  node1:
    build: .
    container_name: goud_node1
    environment:
      - NODE_ID=node1
      - HTTP_PORT=8080
      - P2P_PORT=9000
      - PEERS=node2:9000,node3:9000
    ports:
      # Expose for direct debugging (optional, can be removed in production)
      - "8081:8080"
      - "9001:9000"
    volumes:
      - node1_data:/data
    networks:
      - goud_network
    restart: unless-stopped

  node2:
    build: .
    container_name: goud_node2
    environment:
      - NODE_ID=node2
      - HTTP_PORT=8080
      - P2P_PORT=9000
      - PEERS=node1:9000,node3:9000
    ports:
      # Expose for direct debugging (optional, can be removed in production)
      - "8082:8080"
      - "9002:9000"
    volumes:
      - node2_data:/data
    networks:
      - goud_network
    restart: unless-stopped

  node3:
    build: .
    container_name: goud_node3
    environment:
      - NODE_ID=node3
      - HTTP_PORT=8080
      - P2P_PORT=9000
      - PEERS=node1:9000,node2:9000
    ports:
      # Expose for direct debugging (optional, can be removed in production)
      - "8083:8080"
      - "9003:9000"
    volumes:
      - node3_data:/data
    networks:
      - goud_network
    restart: unless-stopped

networks:
  goud_network:
    driver: bridge

volumes:
  node1_data:
  node2_data:
  node3_data:
